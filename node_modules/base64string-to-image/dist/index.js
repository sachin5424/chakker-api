"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.base64StringToImage = void 0;
let base64StringToImage = (ImageString, path, fileName) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
        const fs = require('fs');
        var matches = ImageString.match(/^data:([A-Za-z-+\/]+);base64,(.+)$/), response = {};
        if (!matches) {
            reject({ message: 'invalid Base64' });
        }
        console.log(matches);
        if (matches.length !== 3) {
            reject({
                message: 'Invalid Image string'
            });
            // throw new Error('Invalid input string');
        }
        response.type = matches[1];
        response.data = Buffer.from(matches[2], 'base64');
        var imageBuffer = response.data;
        var type = response.type;
        var extension = type.split('/')[1];
        fileName = fileName + "." + extension;
        if (!fs.existsSync(path)) {
            fs.mkdirSync(path);
        }
        fs.writeFileSync(path + fileName, imageBuffer, 'utf8');
        // return fileName;
        resolve(fileName);
    });
});
exports.base64StringToImage = base64StringToImage;
//# sourceMappingURL=index.js.map


